{"version":3,"file":"LineScene-DdpOs7tx.js","sources":["../../src/vue/src/pages/Home/blocks/webgl/LineScene.ts"],"sourcesContent":["import { WebGLRenderParams, WebGLSceneOptions, WebGLSize } from \"components/WebGL/gl\";\nimport { WebGLScene } from \"components/WebGL/three/glScene\";\nimport { each, map } from \"lodash\";\nimport { MeshLineGeometry, MeshLineMaterial } from \"meshline\";\nimport { mainWebGLRenderer } from \"plugins/webgl/three\";\nimport { calculateUnitSize, transform2DPointTo3D } from \"plugins/webgl/utils\";\nimport { store as loaderStore } from \"ui/Loader/store\";\n\nimport { damp } from \"maath/easing\";\nimport {\n  Box3,\n  Group,\n  Mesh,\n  PerspectiveCamera,\n  Vector2,\n  Vector3\n} from \"three\";\nimport { SVGLoader, SVGResultPaths } from \"three/examples/jsm/loaders/SVGLoader.js\";\n\nconst DAMP_EASING = (t: number) => 1 / (1 + t + 0.48 * t * t + 0.235 * t * t * t);\n\nconst configSvg = {\n  bgColor: \"248, 244, 238\",\n  svg: {\n    color: \"#3F3785\",\n    lineWidth: 0.018,\n    url: \"/home/ligne.svg\",\n    width: 1440,\n    height: 562,\n    globalOffset: {\n      x: -0.05,\n      y: -0.1,\n    },\n    offsets: [\n      { x: -0.01, y: 0.03 },\n      { x: -0.02, y: -0.005 },\n      { x: -0.05, y: -0.07 },\n    ],\n  },\n};\n\nconst PTS_QUALITY = 200;\n\nexport default class extends WebGLScene {\n  container: Group;\n  sceneSize: WebGLSize;\n  svgData: SVGResultPaths[] = [];\n  lines: Mesh[] = [];\n  lineMaterial: MeshLineMaterial;\n  oldWebGLHidden = true;\n\n  constructor(options: WebGLSceneOptions) {\n    super(options);\n\n    this.container = new Group();\n    this.sceneSize = calculateUnitSize(\n      this.camera.position.z - this.container.position.z,\n      this.getActiveCamera() as PerspectiveCamera\n    );\n\n    this.lineMaterial = new MeshLineMaterial({\n      resolution: new Vector2(\n        mainWebGLRenderer!.domElement.offsetWidth,\n        mainWebGLRenderer!.domElement.offsetHeight\n      ),\n      lineWidth: configSvg.svg.lineWidth,\n      dashArray: 1,\n      dashOffset: 1,\n      dashRatio: 1, // Fully drawn lines\n      opacity: 1,\n      color: configSvg.svg.color,\n    });\n    this.lineMaterial.transparent = true;\n  }\n\n  build() {\n    this.scene.add(this.container);\n    const SvgLoaderResults = loaderStore.getSvg(\"ligne-home\");\n    this.svgData = SvgLoaderResults.paths;\n    this.update();\n  }\n\n  update() {\n    // Clear existing children\n    while (this.container.children.length) {\n      const m = this.container.children[0] as Mesh;\n      if (m) {\n        m.geometry?.dispose();\n        (m.material as MeshLineMaterial)?.dispose();\n      }\n      this.container.remove(this.container.children[0]);\n    }\n\n    //this.container.scale.set(1, 1, 1);\n    this.container.position.set(0, 0, 0);\n    this.container.clear();\n    this.lines = [];\n\n    each(this.svgData, (path: SVGResultPaths, index: number) => {\n\n      const shapes = SVGLoader.createShapes(path);\n      let computePoints: Vector2[] = [];\n\n      each(shapes, (shapePath) => {\n        const points = map(shapePath.getPoints(PTS_QUALITY), (pt) =>\n          this.mapPointTo3D(pt)\n        );\n        computePoints = computePoints.concat(points);\n      });\n\n      const geometry = new MeshLineGeometry();\n      geometry.setPoints(computePoints);\n\n      const material = this.lineMaterial.clone();\n      // material.dashRatio = 0; // Fully drawn lines\n\n      const mesh = new Mesh(geometry, material);\n      mesh.name = `line_${index}`;\n\n      const box = new Box3().setFromObject(mesh);\n      const shapeCenter = box.getCenter(new Vector3());\n      mesh.position.sub(shapeCenter);\n\n      this.container.add(mesh);\n      this.lines.push(mesh);\n    });\n\n    const svgWidthUnit =\n      (configSvg.svg.width / mainWebGLRenderer!.domElement.clientWidth) *\n      this.sceneSize.width;\n    const scaleFactor = (this.sceneSize.width) / svgWidthUnit;\n    this.container.scale.set(scaleFactor, scaleFactor, scaleFactor);\n    const box = new Box3().setFromObject(this.container);\n    const size = box.getSize(new Vector3());\n    this.container.position.x = size.x / 2 - this.sceneSize.width / 2;\n  }\n\n  // Resize is called by default (by the plugin) when the scene is created\n  resize() {\n    super.resize();\n\n    this.sceneSize = calculateUnitSize(this.camera.position.z - this.container.position.z, this.getActiveCamera() as PerspectiveCamera);\n    this.lineMaterial.resolution.set(mainWebGLRenderer!.domElement.offsetWidth, mainWebGLRenderer!.domElement.offsetHeight);\n\n    // If no children in the scene, let's build it\n    if (!this.scene.children.length) {\n      this.build();\n    }\n    else if (this.svgData.length) {\n      this.update();\n    }\n  }\n\n  dispose() {\n    \n    this.disposeGeometries(this.container);\n    this.lineMaterial?.dispose();\n    \n    this.lines = [];\n    this.svgData = [];\n\n    super.dispose();\n  }\n\n  render(params: WebGLRenderParams) {\n    super.render(params);\n    // No animation or dash logic required\n\n    const randomsX = [0.03, -0.01, 0.01];\n    const randomsY = [-0.01, 0.02, 0.03];\n\n    each(this.lines, (mesh, index) => {\n\n      const material = mesh.material as MeshLineMaterial;\n      damp(material, 'dashRatio', 0, 1, params.delta, Infinity, DAMP_EASING);\n\n      if (!mesh.userData.position) {\n        mesh.userData.position = mesh.position.clone();\n      }\n      else {\n        mesh.position.x = mesh.userData.position.x + Math.cos(params.time) * randomsX[index];\n        mesh.position.y = mesh.userData.position.y + Math.sin(params.time) * randomsY[index];;\n      }\n\n    });\n  }\n\n  mapPointTo3D(v: Vector2): Vector2 {\n    const v3d = transform2DPointTo3D(v, {\n      width: mainWebGLRenderer!.domElement.clientWidth,\n      height: mainWebGLRenderer!.domElement.clientHeight,\n    });\n\n    return new Vector2(\n      (this.sceneSize.width / 2) * v3d.x,\n      (this.sceneSize.height / 2) * v3d.y\n    );\n  }\n}\n"],"names":["DAMP_EASING","configSvg","PTS_QUALITY","LineScene","WebGLScene","options","__publicField","Group","MeshLineMaterial","SvgLoaderResults","m","_a","_b","each","path","index","SVGLoader","computePoints","shapes","points","map","shapePath","pt","MeshLineGeometry","geometry","material","mesh","Box3","shapeCenter","svgWidthUnit","mainWebGLRenderer","scaleFactor","size","Vector3","calculateUnitSize","params","randomsX","randomsY"],"mappings":"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"}