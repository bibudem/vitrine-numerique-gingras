{"version":3,"file":"index-C7Y9ajrz.js","sources":["../../src/vue/node_modules/meshline/dist/index.js"],"sourcesContent":["var __defProp = Object.defineProperty;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n  return value;\n};\nimport * as THREE from \"three\";\nfunction memcpy(src, srcOffset, dst, dstOffset, length) {\n  let i;\n  src = src.subarray || src.slice ? src : src.buffer;\n  dst = dst.subarray || dst.slice ? dst : dst.buffer;\n  src = srcOffset ? src.subarray ? src.subarray(srcOffset, length && srcOffset + length) : src.slice(srcOffset, length && srcOffset + length) : src;\n  if (dst.set) {\n    dst.set(src, dstOffset);\n  } else {\n    for (i = 0; i < src.length; i++)\n      dst[i + dstOffset] = src[i];\n  }\n  return dst;\n}\nfunction convertPoints(points) {\n  if (points instanceof Float32Array)\n    return points;\n  if (points instanceof THREE.BufferGeometry)\n    return points.getAttribute(\"position\").array;\n  return points.map((p) => {\n    const isArray = Array.isArray(p);\n    return p instanceof THREE.Vector3 ? [p.x, p.y, p.z] : p instanceof THREE.Vector2 ? [p.x, p.y, 0] : isArray && p.length === 3 ? [p[0], p[1], p[2]] : isArray && p.length === 2 ? [p[0], p[1], 0] : p;\n  }).flat();\n}\nclass MeshLineGeometry extends THREE.BufferGeometry {\n  constructor() {\n    super();\n    __publicField(this, \"type\", \"MeshLine\");\n    __publicField(this, \"isMeshLine\", true);\n    __publicField(this, \"positions\", []);\n    __publicField(this, \"previous\", []);\n    __publicField(this, \"next\", []);\n    __publicField(this, \"side\", []);\n    __publicField(this, \"width\", []);\n    __publicField(this, \"indices_array\", []);\n    __publicField(this, \"uvs\", []);\n    __publicField(this, \"counters\", []);\n    __publicField(this, \"widthCallback\", null);\n    __publicField(this, \"_attributes\");\n    __publicField(this, \"_points\", []);\n    __publicField(this, \"points\");\n    __publicField(this, \"matrixWorld\", new THREE.Matrix4());\n    Object.defineProperties(this, {\n      points: {\n        enumerable: true,\n        get() {\n          return this._points;\n        },\n        set(value) {\n          this.setPoints(value, this.widthCallback);\n        }\n      }\n    });\n  }\n  setMatrixWorld(matrixWorld) {\n    this.matrixWorld = matrixWorld;\n  }\n  setPoints(points, wcb) {\n    points = convertPoints(points);\n    this._points = points;\n    this.widthCallback = wcb != null ? wcb : null;\n    this.positions = [];\n    this.counters = [];\n    if (points.length && points[0] instanceof THREE.Vector3) {\n      for (let j = 0; j < points.length; j++) {\n        const p = points[j];\n        const c = j / (points.length - 1);\n        this.positions.push(p.x, p.y, p.z);\n        this.positions.push(p.x, p.y, p.z);\n        this.counters.push(c);\n        this.counters.push(c);\n      }\n    } else {\n      for (let j = 0; j < points.length; j += 3) {\n        const c = j / (points.length - 1);\n        this.positions.push(points[j], points[j + 1], points[j + 2]);\n        this.positions.push(points[j], points[j + 1], points[j + 2]);\n        this.counters.push(c);\n        this.counters.push(c);\n      }\n    }\n    this.process();\n  }\n  compareV3(a, b) {\n    const aa = a * 6;\n    const ab = b * 6;\n    return this.positions[aa] === this.positions[ab] && this.positions[aa + 1] === this.positions[ab + 1] && this.positions[aa + 2] === this.positions[ab + 2];\n  }\n  copyV3(a) {\n    const aa = a * 6;\n    return [this.positions[aa], this.positions[aa + 1], this.positions[aa + 2]];\n  }\n  process() {\n    const l = this.positions.length / 6;\n    this.previous = [];\n    this.next = [];\n    this.side = [];\n    this.width = [];\n    this.indices_array = [];\n    this.uvs = [];\n    let w;\n    let v;\n    if (this.compareV3(0, l - 1)) {\n      v = this.copyV3(l - 2);\n    } else {\n      v = this.copyV3(0);\n    }\n    this.previous.push(v[0], v[1], v[2]);\n    this.previous.push(v[0], v[1], v[2]);\n    for (let j = 0; j < l; j++) {\n      this.side.push(1);\n      this.side.push(-1);\n      if (this.widthCallback)\n        w = this.widthCallback(j / (l - 1));\n      else\n        w = 1;\n      this.width.push(w);\n      this.width.push(w);\n      this.uvs.push(j / (l - 1), 0);\n      this.uvs.push(j / (l - 1), 1);\n      if (j < l - 1) {\n        v = this.copyV3(j);\n        this.previous.push(v[0], v[1], v[2]);\n        this.previous.push(v[0], v[1], v[2]);\n        const n = j * 2;\n        this.indices_array.push(n, n + 1, n + 2);\n        this.indices_array.push(n + 2, n + 1, n + 3);\n      }\n      if (j > 0) {\n        v = this.copyV3(j);\n        this.next.push(v[0], v[1], v[2]);\n        this.next.push(v[0], v[1], v[2]);\n      }\n    }\n    if (this.compareV3(l - 1, 0)) {\n      v = this.copyV3(1);\n    } else {\n      v = this.copyV3(l - 1);\n    }\n    this.next.push(v[0], v[1], v[2]);\n    this.next.push(v[0], v[1], v[2]);\n    if (!this._attributes || this._attributes.position.count !== this.counters.length) {\n      this._attributes = {\n        position: new THREE.BufferAttribute(new Float32Array(this.positions), 3),\n        previous: new THREE.BufferAttribute(new Float32Array(this.previous), 3),\n        next: new THREE.BufferAttribute(new Float32Array(this.next), 3),\n        side: new THREE.BufferAttribute(new Float32Array(this.side), 1),\n        width: new THREE.BufferAttribute(new Float32Array(this.width), 1),\n        uv: new THREE.BufferAttribute(new Float32Array(this.uvs), 2),\n        index: new THREE.BufferAttribute(new Uint16Array(this.indices_array), 1),\n        counters: new THREE.BufferAttribute(new Float32Array(this.counters), 1)\n      };\n    } else {\n      this._attributes.position.copyArray(new Float32Array(this.positions));\n      this._attributes.position.needsUpdate = true;\n      this._attributes.previous.copyArray(new Float32Array(this.previous));\n      this._attributes.previous.needsUpdate = true;\n      this._attributes.next.copyArray(new Float32Array(this.next));\n      this._attributes.next.needsUpdate = true;\n      this._attributes.side.copyArray(new Float32Array(this.side));\n      this._attributes.side.needsUpdate = true;\n      this._attributes.width.copyArray(new Float32Array(this.width));\n      this._attributes.width.needsUpdate = true;\n      this._attributes.uv.copyArray(new Float32Array(this.uvs));\n      this._attributes.uv.needsUpdate = true;\n      this._attributes.index.copyArray(new Uint16Array(this.indices_array));\n      this._attributes.index.needsUpdate = true;\n    }\n    this.setAttribute(\"position\", this._attributes.position);\n    this.setAttribute(\"previous\", this._attributes.previous);\n    this.setAttribute(\"next\", this._attributes.next);\n    this.setAttribute(\"side\", this._attributes.side);\n    this.setAttribute(\"width\", this._attributes.width);\n    this.setAttribute(\"uv\", this._attributes.uv);\n    this.setAttribute(\"counters\", this._attributes.counters);\n    this.setAttribute(\"position\", this._attributes.position);\n    this.setAttribute(\"previous\", this._attributes.previous);\n    this.setAttribute(\"next\", this._attributes.next);\n    this.setAttribute(\"side\", this._attributes.side);\n    this.setAttribute(\"width\", this._attributes.width);\n    this.setAttribute(\"uv\", this._attributes.uv);\n    this.setAttribute(\"counters\", this._attributes.counters);\n    this.setIndex(this._attributes.index);\n    this.computeBoundingSphere();\n    this.computeBoundingBox();\n  }\n  advance({ x, y, z }) {\n    const positions = this._attributes.position.array;\n    const previous = this._attributes.previous.array;\n    const next = this._attributes.next.array;\n    const l = positions.length;\n    memcpy(positions, 0, previous, 0, l);\n    memcpy(positions, 6, positions, 0, l - 6);\n    positions[l - 6] = x;\n    positions[l - 5] = y;\n    positions[l - 4] = z;\n    positions[l - 3] = x;\n    positions[l - 2] = y;\n    positions[l - 1] = z;\n    memcpy(positions, 6, next, 0, l - 6);\n    next[l - 6] = x;\n    next[l - 5] = y;\n    next[l - 4] = z;\n    next[l - 3] = x;\n    next[l - 2] = y;\n    next[l - 1] = z;\n    this._attributes.position.needsUpdate = true;\n    this._attributes.previous.needsUpdate = true;\n    this._attributes.next.needsUpdate = true;\n  }\n}\nconst vertexShader = `\n  #include <common>\n  #include <logdepthbuf_pars_vertex>\n  #include <fog_pars_vertex>\n  #include <clipping_planes_pars_vertex>\n\n  attribute vec3 previous;\n  attribute vec3 next;\n  attribute float side;\n  attribute float width;\n  attribute float counters;\n  \n  uniform vec2 resolution;\n  uniform float lineWidth;\n  uniform vec3 color;\n  uniform float opacity;\n  uniform float sizeAttenuation;\n  \n  varying vec2 vUV;\n  varying vec4 vColor;\n  varying float vCounters;\n  \n  vec2 fix(vec4 i, float aspect) {\n    vec2 res = i.xy / i.w;\n    res.x *= aspect;\n    return res;\n  }\n  \n  void main() {\n    float aspect = resolution.x / resolution.y;\n    vColor = vec4(color, opacity);\n    vUV = uv;\n    vCounters = counters;\n  \n    mat4 m = projectionMatrix * modelViewMatrix;\n    vec4 finalPosition = m * vec4(position, 1.0) * aspect;\n    vec4 prevPos = m * vec4(previous, 1.0);\n    vec4 nextPos = m * vec4(next, 1.0);\n  \n    vec2 currentP = fix(finalPosition, aspect);\n    vec2 prevP = fix(prevPos, aspect);\n    vec2 nextP = fix(nextPos, aspect);\n  \n    float w = lineWidth * width;\n  \n    vec2 dir;\n    if (nextP == currentP) dir = normalize(currentP - prevP);\n    else if (prevP == currentP) dir = normalize(nextP - currentP);\n    else {\n      vec2 dir1 = normalize(currentP - prevP);\n      vec2 dir2 = normalize(nextP - currentP);\n      dir = normalize(dir1 + dir2);\n  \n      vec2 perp = vec2(-dir1.y, dir1.x);\n      vec2 miter = vec2(-dir.y, dir.x);\n      //w = clamp(w / dot(miter, perp), 0., 4. * lineWidth * width);\n    }\n  \n    //vec2 normal = (cross(vec3(dir, 0.), vec3(0., 0., 1.))).xy;\n    vec4 normal = vec4(-dir.y, dir.x, 0., 1.);\n    normal.xy *= .5 * w;\n    //normal *= projectionMatrix;\n    if (sizeAttenuation == 0.) {\n      normal.xy *= finalPosition.w;\n      normal.xy /= (vec4(resolution, 0., 1.) * projectionMatrix).xy * aspect;\n    }\n  \n    finalPosition.xy += normal.xy * side;\n    gl_Position = finalPosition;\n    #include <logdepthbuf_vertex>\n    #include <fog_vertex>\n    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n    #include <clipping_planes_vertex>\n    #include <fog_vertex>\n  }\n`;\nconst version = /* @__PURE__ */ (() => parseInt(THREE.REVISION.replace(/\\D+/g, \"\")))();\nconst colorspace_fragment = version >= 154 ? \"colorspace_fragment\" : \"encodings_fragment\";\nconst fragmentShader = `\n  #include <fog_pars_fragment>\n  #include <logdepthbuf_pars_fragment>\n  #include <clipping_planes_pars_fragment>\n  \n  uniform sampler2D map;\n  uniform sampler2D alphaMap;\n  uniform float useGradient;\n  uniform float useMap;\n  uniform float useAlphaMap;\n  uniform float useDash;\n  uniform float dashArray;\n  uniform float dashOffset;\n  uniform float dashRatio;\n  uniform float visibility;\n  uniform float alphaTest;\n  uniform vec2 repeat;\n  uniform vec3 gradient[2];\n  \n  varying vec2 vUV;\n  varying vec4 vColor;\n  varying float vCounters;\n  \n  void main() {\n    #include <logdepthbuf_fragment>\n    vec4 diffuseColor = vColor;\n    if (useGradient == 1.) diffuseColor = vec4(mix(gradient[0], gradient[1], vCounters), 1.0);\n    if (useMap == 1.) diffuseColor *= texture2D(map, vUV * repeat);\n    if (useAlphaMap == 1.) diffuseColor.a *= texture2D(alphaMap, vUV * repeat).a;\n    if (diffuseColor.a < alphaTest) discard;\n    if (useDash == 1.) diffuseColor.a *= ceil(mod(vCounters + dashOffset, dashArray) - (dashArray * dashRatio));\n    diffuseColor.a *= step(vCounters, visibility);\n    #include <clipping_planes_fragment>\n    gl_FragColor = diffuseColor;     \n    #include <fog_fragment>\n    #include <tonemapping_fragment>\n    #include <${colorspace_fragment}>\n  }\n`;\nclass MeshLineMaterial extends THREE.ShaderMaterial {\n  constructor(parameters) {\n    super({\n      uniforms: {\n        ...THREE.UniformsLib.fog,\n        lineWidth: { value: 1 },\n        map: { value: null },\n        useMap: { value: 0 },\n        alphaMap: { value: null },\n        useAlphaMap: { value: 0 },\n        color: { value: new THREE.Color(16777215) },\n        gradient: { value: [new THREE.Color(16711680), new THREE.Color(65280)] },\n        opacity: { value: 1 },\n        resolution: { value: new THREE.Vector2(1, 1) },\n        sizeAttenuation: { value: 1 },\n        dashArray: { value: 0 },\n        dashOffset: { value: 0 },\n        dashRatio: { value: 0.5 },\n        useDash: { value: 0 },\n        useGradient: { value: 0 },\n        visibility: { value: 1 },\n        alphaTest: { value: 0 },\n        repeat: { value: new THREE.Vector2(1, 1) }\n      },\n      vertexShader,\n      fragmentShader\n    });\n    __publicField(this, \"lineWidth\");\n    __publicField(this, \"map\");\n    __publicField(this, \"useMap\");\n    __publicField(this, \"alphaMap\");\n    __publicField(this, \"useAlphaMap\");\n    __publicField(this, \"color\");\n    __publicField(this, \"gradient\");\n    __publicField(this, \"resolution\");\n    __publicField(this, \"sizeAttenuation\");\n    __publicField(this, \"dashArray\");\n    __publicField(this, \"dashOffset\");\n    __publicField(this, \"dashRatio\");\n    __publicField(this, \"useDash\");\n    __publicField(this, \"useGradient\");\n    __publicField(this, \"visibility\");\n    __publicField(this, \"repeat\");\n    this.type = \"MeshLineMaterial\";\n    Object.defineProperties(this, {\n      lineWidth: {\n        enumerable: true,\n        get() {\n          return this.uniforms.lineWidth.value;\n        },\n        set(value) {\n          this.uniforms.lineWidth.value = value;\n        }\n      },\n      map: {\n        enumerable: true,\n        get() {\n          return this.uniforms.map.value;\n        },\n        set(value) {\n          this.uniforms.map.value = value;\n        }\n      },\n      useMap: {\n        enumerable: true,\n        get() {\n          return this.uniforms.useMap.value;\n        },\n        set(value) {\n          this.uniforms.useMap.value = value;\n        }\n      },\n      alphaMap: {\n        enumerable: true,\n        get() {\n          return this.uniforms.alphaMap.value;\n        },\n        set(value) {\n          this.uniforms.alphaMap.value = value;\n        }\n      },\n      useAlphaMap: {\n        enumerable: true,\n        get() {\n          return this.uniforms.useAlphaMap.value;\n        },\n        set(value) {\n          this.uniforms.useAlphaMap.value = value;\n        }\n      },\n      color: {\n        enumerable: true,\n        get() {\n          return this.uniforms.color.value;\n        },\n        set(value) {\n          this.uniforms.color.value = value;\n        }\n      },\n      gradient: {\n        enumerable: true,\n        get() {\n          return this.uniforms.gradient.value;\n        },\n        set(value) {\n          this.uniforms.gradient.value = value;\n        }\n      },\n      opacity: {\n        enumerable: true,\n        get() {\n          return this.uniforms.opacity.value;\n        },\n        set(value) {\n          this.uniforms.opacity.value = value;\n        }\n      },\n      resolution: {\n        enumerable: true,\n        get() {\n          return this.uniforms.resolution.value;\n        },\n        set(value) {\n          this.uniforms.resolution.value.copy(value);\n        }\n      },\n      sizeAttenuation: {\n        enumerable: true,\n        get() {\n          return this.uniforms.sizeAttenuation.value;\n        },\n        set(value) {\n          this.uniforms.sizeAttenuation.value = value;\n        }\n      },\n      dashArray: {\n        enumerable: true,\n        get() {\n          return this.uniforms.dashArray.value;\n        },\n        set(value) {\n          this.uniforms.dashArray.value = value;\n          this.useDash = value !== 0 ? 1 : 0;\n        }\n      },\n      dashOffset: {\n        enumerable: true,\n        get() {\n          return this.uniforms.dashOffset.value;\n        },\n        set(value) {\n          this.uniforms.dashOffset.value = value;\n        }\n      },\n      dashRatio: {\n        enumerable: true,\n        get() {\n          return this.uniforms.dashRatio.value;\n        },\n        set(value) {\n          this.uniforms.dashRatio.value = value;\n        }\n      },\n      useDash: {\n        enumerable: true,\n        get() {\n          return this.uniforms.useDash.value;\n        },\n        set(value) {\n          this.uniforms.useDash.value = value;\n        }\n      },\n      useGradient: {\n        enumerable: true,\n        get() {\n          return this.uniforms.useGradient.value;\n        },\n        set(value) {\n          this.uniforms.useGradient.value = value;\n        }\n      },\n      visibility: {\n        enumerable: true,\n        get() {\n          return this.uniforms.visibility.value;\n        },\n        set(value) {\n          this.uniforms.visibility.value = value;\n        }\n      },\n      alphaTest: {\n        enumerable: true,\n        get() {\n          return this.uniforms.alphaTest.value;\n        },\n        set(value) {\n          this.uniforms.alphaTest.value = value;\n        }\n      },\n      repeat: {\n        enumerable: true,\n        get() {\n          return this.uniforms.repeat.value;\n        },\n        set(value) {\n          this.uniforms.repeat.value.copy(value);\n        }\n      }\n    });\n    this.setValues(parameters);\n  }\n  copy(source) {\n    super.copy(source);\n    this.lineWidth = source.lineWidth;\n    this.map = source.map;\n    this.useMap = source.useMap;\n    this.alphaMap = source.alphaMap;\n    this.useAlphaMap = source.useAlphaMap;\n    this.color.copy(source.color);\n    this.gradient = source.gradient;\n    this.opacity = source.opacity;\n    this.resolution.copy(source.resolution);\n    this.sizeAttenuation = source.sizeAttenuation;\n    this.dashArray = source.dashArray;\n    this.dashOffset = source.dashOffset;\n    this.dashRatio = source.dashRatio;\n    this.useDash = source.useDash;\n    this.useGradient = source.useGradient;\n    this.visibility = source.visibility;\n    this.alphaTest = source.alphaTest;\n    this.repeat.copy(source.repeat);\n    return this;\n  }\n}\nfunction raycast(raycaster, intersects) {\n  const inverseMatrix = new THREE.Matrix4();\n  const ray = new THREE.Ray();\n  const sphere = new THREE.Sphere();\n  const interRay = new THREE.Vector3();\n  const geometry = this.geometry;\n  sphere.copy(geometry.boundingSphere);\n  sphere.applyMatrix4(this.matrixWorld);\n  if (!raycaster.ray.intersectSphere(sphere, interRay))\n    return;\n  inverseMatrix.copy(this.matrixWorld).invert();\n  ray.copy(raycaster.ray).applyMatrix4(inverseMatrix);\n  const vStart = new THREE.Vector3();\n  const vEnd = new THREE.Vector3();\n  const interSegment = new THREE.Vector3();\n  const step = this instanceof THREE.LineSegments ? 2 : 1;\n  const index = geometry.index;\n  const attributes = geometry.attributes;\n  if (index !== null) {\n    const indices = index.array;\n    const positions = attributes.position.array;\n    const widths = attributes.width.array;\n    for (let i = 0, l = indices.length - 1; i < l; i += step) {\n      const a = indices[i];\n      const b = indices[i + 1];\n      vStart.fromArray(positions, a * 3);\n      vEnd.fromArray(positions, b * 3);\n      const width = widths[Math.floor(i / 3)] != void 0 ? widths[Math.floor(i / 3)] : 1;\n      const precision = raycaster.params.Line.threshold + this.material.lineWidth * width / 2;\n      const precisionSq = precision * precision;\n      const distSq = ray.distanceSqToSegment(vStart, vEnd, interRay, interSegment);\n      if (distSq > precisionSq)\n        continue;\n      interRay.applyMatrix4(this.matrixWorld);\n      const distance = raycaster.ray.origin.distanceTo(interRay);\n      if (distance < raycaster.near || distance > raycaster.far)\n        continue;\n      intersects.push({\n        distance,\n        point: interSegment.clone().applyMatrix4(this.matrixWorld),\n        index: i,\n        face: null,\n        faceIndex: void 0,\n        object: this\n      });\n      i = l;\n    }\n  }\n}\nexport {\n  MeshLineGeometry,\n  MeshLineMaterial,\n  raycast\n};\n"],"names":["__defProp","__defNormalProp","obj","key","value","__publicField","memcpy","src","srcOffset","dst","dstOffset","length","i","convertPoints","points","THREE.BufferGeometry","p","isArray","THREE.Vector3","THREE.Vector2","MeshLineGeometry","THREE.Matrix4","matrixWorld","wcb","j","c","a","b","aa","ab","l","w","v","THREE.BufferAttribute","x","y","z","positions","previous","next","vertexShader","version","THREE.REVISION","colorspace_fragment","fragmentShader","MeshLineMaterial","THREE.ShaderMaterial","parameters","THREE.UniformsLib","THREE.Color","source"],"mappings":"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","x_google_ignoreList":[0]}